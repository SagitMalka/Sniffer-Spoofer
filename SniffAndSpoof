#include <stdio.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <pcap.h>
#include <string.h>
#include <netinet/if_ether.h>

#define SOURCE_IP "10.0.0.45"
#define BUFFER_SIZE 1500

/** Declaring function **/
unsigned short calculate_checksum(unsigned short *buffer, int len);
int send_spoofed_packet(struct in_addr source, struct in_addr destination);
void got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet );

int main() {

    /**SETTING THE DEVICE**/
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_t *handle;
    char filter_exp[] = "ip proto 0x6";
    struct bpf_program bpfProgram;
    bpf_u_int32 net;


    /**OPENING THE DEVICE FOR SNIFFING**/
    handle = pcap_open_live("enp0s3", BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Can't open enp0s3: %s\n", errbuf);
        return -1;
    }

    /**FILTERING TRAFFIC**/
    if (pcap_compile(handle, &bpfProgram, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Couldn't parse filter %s: %s\n", filter_exp, pcap_geterr(handle));
        return(2);
    }

    pcap_setfilter(handle, &bpfProgram);
    if (pcap_setfilter(handle, &bpfProgram) == -1) {
        fprintf(stderr, "Couldn't install filter %s: %s\n", filter_exp, pcap_geterr(handle));
        return(2);
    }

    /**CAPTURE PACKETS**/
    pcap_loop(handle, -1, got_packet, NULL);

    /** close handel and free code **/
    pcap_close(handle);
    pcap_freecode(&bpfProgram);


    return (0);
}


/** Compute checksum (RFC 1071) **/
unsigned short calculate_checksum(unsigned short *buffer, int length) {
    int nleft = length;
    int sum = 0;
    unsigned short *w = buffer;
    unsigned short answer = 0;

    while (nleft > 1) {
        sum += *w++;
        nleft -= 2;
    }

    if (nleft == 1) {
        *((unsigned char *) &answer) = *((unsigned char *) w);
        sum += answer;
    }

    /** add back carry outs from top 16 bits to low 16 bits **/
    sum = (sum >> 16) + (sum & 0xffff); // add hi 16 to low 16
    sum += (sum >> 16);                 // add carry
    answer = ~sum;                      // truncate to 16 bits

    return answer;
}


int send_spoofed_packet(struct in_addr source, struct in_addr destination){
    int fd;
    struct sockaddr_in sockaddrIn;
    char buffer[1500];
    fd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if(socket < 0){
        perror("can't open socket");
        exit(-1);
    }

    sockaddrIn.sin_family = AF_INET;
    sockaddrIn.sin_addr =destination;

    struct ip *pIp = (struct ip *)buffer;
    pIp->ip_v = 4;
    pIp->ip_hl = 5;
    pIp->ip_ttl = 20;
    pIp->ip_src = destination;
    pIp->ip_dst = source;
    pIp->ip_p = IPPROTO_ICMP;
    pIp->ip_len = htons(sizeof(struct ip) + sizeof(struct icmp));

    struct icmp *pIcmp = (struct icmp *)(buffer + sizeof(struct ip));
    pIcmp->icmp_type = 0;
    pIcmp->icmp_cksum =8;
    pIcmp->icmp_cksum = calculate_checksum((unsigned short *)pIcmp, sizeof(struct icmp));

    if(sendto(fd, buffer, ntohs(pIp->ip_len), 0, (struct sockaddr *)&sockaddrIn, sizeof (sockaddrIn)) < 0){
        perror("sendto faild \n");
        exit(-1);
    }
}
void got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet )
{
    struct ethhdr *ether_header = (struct ethhdr *) packet;

    if (ntohs(ether_header->h_proto) == 0x0800) {
        struct ip *pIp = (struct ip *)(packet + sizeof(struct ethhdr));
        if (pIp->ip_p == IPPROTO_ICMP){
            send_spoofed_packet(pIp->ip_src, pIp->ip_dst);
        }
    }
}
